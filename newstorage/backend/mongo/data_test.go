package mongostorage

import (
	"runtime/debug"
	"testing"

	sebakblock "boscoin.io/sebak/lib/block"
	sebakcommon "boscoin.io/sebak/lib/common"
	sebaktransaction "boscoin.io/sebak/lib/transaction"
	"github.com/stretchr/testify/suite"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"

	"github.com/spikeekips/naru/common"
	"github.com/spikeekips/naru/newstorage"
	"github.com/spikeekips/naru/newstorage/item"
)

type testMongoData struct {
	baseTestMongoStorage
}

func (t *testMongoData) TestDecimal() {
	{
		k := "10000000000000000000"
		a, err := primitive.ParseDecimal128(k)
		t.NoError(err)
		t.Equal(k, a.String())
	}
}

type testMongoDataAmount struct {
	A sebakcommon.Amount
	B string
}

func (t *testMongoData) TestInsertAmount() {
	defer func() {
		if r := recover(); r != nil {
			debug.PrintStack()
		}
	}()

	value := testMongoDataAmount{
		A: sebakcommon.MustAmountFromString("10000000000000000000"),
		B: common.RandomUUID(),
	}

	{
		b, err := bson.Marshal(value)
		t.NoError(err)

		var n testMongoDataAmount
		err = bson.Unmarshal(b, &n)
		t.NoError(err)
		t.Equal(value.A, n.A)
		t.Equal(value.B, n.B)
	}

	err := t.s.Insert(common.RandomUUID(), value)
	t.NoError(err)
}

func (t *testMongoData) TestInsertTrnasaction() {
	bblock := []byte{
		123, 34, 118, 101, 114, 115, 105, 111, 110, 34, 58, 48, 44, 34, 112, 114, 101, 118, 95, 98, 108, 111, 99, 107, 95, 104,
		97, 115, 104, 34, 58, 34, 71, 90, 56, 103, 99, 101, 81, 55, 71, 87, 51, 71, 75, 50, 102, 122, 111, 99, 90, 116, 98, 107,
		66, 115, 88, 117, 101, 118, 53, 71, 85, 51, 115, 87, 104, 97, 104, 114, 88, 110, 90, 102, 51, 53, 34, 44, 34, 116, 114,
		97, 110, 115, 97, 99, 116, 105, 111, 110, 115, 95, 114, 111, 111, 116, 34, 58, 34, 50, 98, 54, 80, 55, 70, 122, 119,
		122, 99, 69, 75, 90, 81, 90, 66, 56, 89, 109, 52, 57, 122, 71, 49, 84, 86, 105, 104, 85, 83, 84, 70, 65, 120, 119, 76,
		80, 83, 107, 100, 100, 114, 49, 80, 34, 44, 34, 112, 114, 111, 112, 111, 115, 101, 100, 95, 116, 105, 109, 101, 34, 58,
		34, 50, 48, 49, 57, 45, 48, 50, 45, 50, 55, 84, 49, 57, 58, 50, 48, 58, 48, 48, 46, 51, 56, 55, 57, 50, 54, 48, 48, 48,
		43, 48, 57, 58, 48, 48, 34, 44, 34, 104, 101, 105, 103, 104, 116, 34, 58, 50, 48, 48, 48, 49, 44, 34, 116, 111, 116, 97,
		108, 45, 116, 120, 115, 34, 58, 50, 48, 48, 48, 49, 44, 34, 116, 111, 116, 97, 108, 45, 111, 112, 115, 34, 58, 52, 48,
		48, 48, 50, 44, 34, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 115, 34, 58, 110, 117, 108, 108, 44, 34, 112,
		114, 111, 112, 111, 115, 101, 114, 95, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 34, 58, 34, 68, 104, 67, 55,
		54, 104, 89, 119, 80, 97, 113, 67, 49, 74, 90, 114, 69, 50, 51, 102, 69, 121, 111, 118, 114, 119, 121, 77, 50, 86, 114,
		77, 98, 103, 84, 107, 66, 115, 67, 109, 65, 76, 55, 86, 34, 44, 34, 104, 97, 115, 104, 34, 58, 34, 50, 106, 70, 104, 71,
		86, 88, 109, 56, 80, 112, 105, 121, 49, 70, 65, 118, 107, 77, 55, 78, 101, 115, 82, 69, 117, 103, 102, 69, 119, 57, 56,
		117, 110, 99, 103, 68, 119, 120, 88, 116, 66, 106, 53, 34, 44, 34, 112, 114, 111, 112, 111, 115, 101, 114, 34, 58, 34,
		71, 66, 66, 72, 86, 83, 75, 71, 50, 77, 65, 73, 79, 81, 65, 88, 51, 85, 72, 79, 86, 85, 74, 88, 89, 76, 72, 84, 90, 71,
		66, 75, 88, 89, 53, 65, 82, 50, 65, 86, 68, 53, 52, 69, 69, 80, 72, 53, 75, 72, 75, 89, 81, 73, 65, 81, 34, 44, 34, 114,
		111, 117, 110, 100, 34, 58, 48, 44, 34, 99, 111, 110, 102, 105, 114, 109, 101, 100, 34, 58, 34, 50, 48, 49, 57, 45, 48,
		50, 45, 50, 55, 84, 49, 57, 58, 50, 48, 58, 48, 48, 46, 52, 52, 55, 48, 49, 51, 48, 48, 48, 43, 48, 57, 58, 48, 48, 34,
		125,
	}

	btx := []byte{
		123, 34, 72, 34, 58, 123, 34, 118, 101, 114, 115, 105, 111, 110, 34, 58, 34, 49, 34, 44, 34, 99, 114, 101, 97, 116, 101,
		100, 34, 58, 34, 50, 48, 49, 57, 45, 48, 50, 45, 50, 55, 84, 49, 57, 58, 50, 48, 58, 48, 48, 46, 51, 56, 50, 51, 50, 50,
		48, 48, 48, 43, 48, 57, 58, 48, 48, 34, 44, 34, 115, 105, 103, 110, 97, 116, 117, 114, 101, 34, 58, 34, 50, 117, 118,
		55, 53, 118, 65, 112, 98, 100, 109, 112, 69, 80, 106, 88, 111, 57, 77, 117, 107, 116, 65, 75, 82, 49, 65, 120, 97, 67,
		57, 53, 120, 90, 110, 118, 57, 117, 57, 84, 74, 57, 66, 99, 53, 103, 121, 56, 72, 119, 50, 75, 112, 77, 107, 88, 99,
		122, 76, 81, 82, 100, 105, 117, 97, 109, 119, 55, 69, 115, 49, 111, 97, 83, 111, 84, 114, 65, 99, 55, 68, 97, 119, 100,
		119, 122, 66, 69, 34, 125, 44, 34, 66, 34, 58, 123, 34, 115, 111, 117, 114, 99, 101, 34, 58, 34, 71, 66, 66, 72, 86, 83,
		75, 71, 50, 77, 65, 73, 79, 81, 65, 88, 51, 85, 72, 79, 86, 85, 74, 88, 89, 76, 72, 84, 90, 71, 66, 75, 88, 89, 53, 65,
		82, 50, 65, 86, 68, 53, 52, 69, 69, 80, 72, 53, 75, 72, 75, 89, 81, 73, 65, 81, 34, 44, 34, 102, 101, 101, 34, 58, 34,
		48, 34, 44, 34, 115, 101, 113, 117, 101, 110, 99, 101, 95, 105, 100, 34, 58, 48, 44, 34, 111, 112, 101, 114, 97, 116,
		105, 111, 110, 115, 34, 58, 91, 123, 34, 72, 34, 58, 123, 34, 116, 121, 112, 101, 34, 58, 34, 99, 111, 108, 108, 101,
		99, 116, 45, 116, 120, 45, 102, 101, 101, 34, 125, 44, 34, 66, 34, 58, 123, 34, 116, 97, 114, 103, 101, 116, 34, 58, 34,
		71, 68, 67, 84, 67, 81, 84, 70, 74, 83, 50, 84, 55, 66, 78, 69, 68, 88, 77, 77, 68, 87, 87, 52, 90, 52, 71, 53, 69, 69,
		50, 84, 66, 73, 89, 77, 75, 75, 83, 80, 88, 81, 69, 51, 76, 71, 66, 90, 76, 55, 83, 88, 71, 75, 74, 55, 34, 44, 34, 97,
		109, 111, 117, 110, 116, 34, 58, 34, 48, 34, 44, 34, 116, 120, 115, 34, 58, 48, 44, 34, 98, 108, 111, 99, 107, 45, 104,
		101, 105, 103, 104, 116, 34, 58, 50, 48, 48, 48, 48, 44, 34, 98, 108, 111, 99, 107, 45, 104, 97, 115, 104, 34, 58, 34,
		71, 90, 56, 103, 99, 101, 81, 55, 71, 87, 51, 71, 75, 50, 102, 122, 111, 99, 90, 116, 98, 107, 66, 115, 88, 117, 101,
		118, 53, 71, 85, 51, 115, 87, 104, 97, 104, 114, 88, 110, 90, 102, 51, 53, 34, 44, 34, 116, 111, 116, 97, 108, 45, 116,
		120, 115, 34, 58, 50, 48, 48, 48, 48, 44, 34, 116, 111, 116, 97, 108, 45, 111, 112, 115, 34, 58, 48, 125, 125, 44, 123,
		34, 72, 34, 58, 123, 34, 116, 121, 112, 101, 34, 58, 34, 105, 110, 102, 108, 97, 116, 105, 111, 110, 34, 125, 44, 34,
		66, 34, 58, 123, 34, 116, 97, 114, 103, 101, 116, 34, 58, 34, 71, 68, 67, 84, 67, 81, 84, 70, 74, 83, 50, 84, 55, 66,
		78, 69, 68, 88, 77, 77, 68, 87, 87, 52, 90, 52, 71, 53, 69, 69, 50, 84, 66, 73, 89, 77, 75, 75, 83, 80, 88, 81, 69, 51,
		76, 71, 66, 90, 76, 55, 83, 88, 71, 75, 74, 55, 34, 44, 34, 97, 109, 111, 117, 110, 116, 34, 58, 34, 49, 48, 48, 48, 48,
		48, 48, 48, 48, 48, 48, 48, 48, 34, 44, 34, 105, 110, 105, 116, 105, 97, 108, 95, 98, 97, 108, 97, 110, 99, 101, 34, 58,
		34, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 34, 44, 34, 114, 97, 116, 105, 111,
		34, 58, 34, 48, 46, 48, 48, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 34, 44, 34, 98, 108, 111, 99,
		107, 45, 104, 101, 105, 103, 104, 116, 34, 58, 50, 48, 48, 48, 48, 44, 34, 98, 108, 111, 99, 107, 45, 104, 97, 115, 104,
		34, 58, 34, 71, 90, 56, 103, 99, 101, 81, 55, 71, 87, 51, 71, 75, 50, 102, 122, 111, 99, 90, 116, 98, 107, 66, 115, 88,
		117, 101, 118, 53, 71, 85, 51, 115, 87, 104, 97, 104, 114, 88, 110, 90, 102, 51, 53, 34, 44, 34, 116, 111, 116, 97, 108,
		45, 116, 120, 115, 34, 58, 50, 48, 48, 48, 48, 44, 34, 116, 111, 116, 97, 108, 45, 111, 112, 115, 34, 58, 48, 125, 125,
		93, 125, 125,
	}

	var block item.Block
	{
		var blk sebakblock.Block
		err := newstorage.Deserialize(bblock, &blk)
		t.NoError(err)
		block = item.NewBlock(blk)
	}

	var itx item.Transaction
	{
		var tx sebaktransaction.Transaction
		err := newstorage.Deserialize(btx, &tx)
		t.NoError(err)

		itx = item.NewTransaction(tx, block, btx)
	}

	{
		// TODO remove
		b, err := bson.Marshal(itx)
		t.NoError(err)

		var ntx item.Transaction
		err = bson.Unmarshal(b, &ntx)
		t.NoError(err)
		t.Equal(itx.Hash, ntx.Hash)
	}

	{
		err := itx.Save(t.s)
		t.NoError(err)
	}

	{
		err := block.Save(t.s)
		t.NoError(err)
	}
}

func TestMongoData(t *testing.T) {
	if client, err := connect(); err != nil {
		log.Warn("mongodb test will be skipped")
		return
	} else {
		disconnect(client)
	}

	suite.Run(t, new(testMongoData))
}
